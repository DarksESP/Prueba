COMANDOS 4: CAMBIOS

1. En el caso de que nos hayamos olvidado de modificar o agregar algun archivo, o simplemente queramos cambiar el mensaje del ultimo commit, lo usamos para re-commitear el commit anterior

git commit --amend -m "Mensaje"

2. Lo usamos para eliminar cambios/archivos. LO USAMOS CUANDO NO HAYAMOS HECHO ADD, NI COMMIT

git checkout -- js/service.js


4. ELIMINA TODOS LOS CAMBIOS EN ARCHIVOS MODIFICADOS (commits) Y PREPARADOS (add) de manera absoluta
git reset --hard HEAD~1

5. LOS COMMITS SER√ÅN ELIMINADOS, PERO LOS CAMBIOS/MODIFICACIONES Y EL ADD SE MANTIENEN 
git reset --soft HEAD~1

6.  ELIMINA EL ARCHIVO PUESTO EN LA ZONA DE PREPARACION (ADD)
git reset HEAD archivo 

7. git reset head~N: deshacer los commits y el add anterior

8. git reset hash se deshacen los commits posteriores al especificado

9. git revert hash
Elimina el commit que queramos y hace un nuevo commit guardando ese cambio

Nos sirve para eliminar el merge y sus datos
git revert -m 1 hash

10. Se usa para guardar aquellos cambios que no queramos ni ponerlos en el add ni en el commit, pero los queremos guardar para despues de forma provisori
 git stash save TITULO

11. git stash pop stash@{0}: El Stash seleccionado {0} va a volver al repositorio 

12. git stash list: se muestra la lista de stash que tenemos, cada uno con un NUMERO que lo representa

13. git stash apply stash@{NUMERO DEL STASH} : el stash seleccionado vuelve al repositorio local

14. git stash drop <STASH>: elimina de la lista el
stash especificado.
